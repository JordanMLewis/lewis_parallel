To use, simply "make" in directory. Then, type "./serialized_test input.pnm out.pnm" 
to create your output pnm file. You may also "cat program_log" to see additional 
timing information.

I chose to do a inversion of the input image, which simply inverts the value of 
the RGB values of each pixel. Because I was originally storing pixel information
in a pixel struct, I had to get the value of each RBG value and put them into a 
char array to be used in the ISPC code. This also means I had to put the chars
back into pixel structs after the ISPC code. 

Normally this would be a large performance hit, the parallelized inner loop 
makes the code exceptionally fast. I as happy to see that in artificial tests
handling images of 10,000 x 10,000, my serialized code would take 5 or more seconds
to complete, while the parallelized code would be finished in under one second.
Cool!